1. What is computation?

- What does a computer do?
	- Performs calculations.
	- Remembers results.
	- Calculations are built in to a language or defined by a user.
	- Computers only know what you tell them.

- Types of knowledge
	- Declarative knowledge: statemants of fact. 
	- Imperative knowledge: recipe or how to.

- What is a computer program?
	- Sequence of steps, flow of control, when to stop.

- Computers are machines
	- Fixed program computers: calculator.
	- Stored program computers: machine stores and executed instructions.

- Basic machine architectue
	- Memory: contains data and sequence of instructions.
	- Arithmietic logic unit: does primitive ops, gets/stores data from memory.
	- Control unit: program counter.
	- Input.
	- Output.

- Stored program computer
	- Sequence of instructions built from primitive instructions.
		- Arithmetic and logic.
		- Simple tests.
		- Moving data.
	- Special program (intrepreter) executes each instruction in order.
		- Use tests to change flow of control through sequence.
		- Stop when done.

- Basic primitives
	- Alan Turning showed that you we can compute anything using 6 primitives.
		- Right: move head to right of current square.
		- Left: move head to left of current square.
		- Print: print a symbol on the current square.
		- Scan: identify andy symbols on the current square.
		- Erase: erase any sombols presented on the current square.
		- Nothing/halt: do nothing.
	- Modern programming languages have more convenient set of primitives.
	- Can abstract methods to create new primitives.
	- Anythin computable in one language is computable in another.

- Aspects of languages
	- Syntax error: the instruction does not work.
	- Static semantics: the instruction does not make sense.

- Python programs
	- A program is a sequence of definitions and commands.
		- Definitions: evaulated.
		- Commands: executed by the Python interpreter in a shell.
	- Commands (statements): instruct interpreter to do something.

- Objects
	- Programs manipulate data objects.
	- Objects have a type that defines the kinds of things programs can do to them.
	- Objects are:
		- Scalar: cannot be subdivided (5).
		- Non-scalar: have internal structure that can be accessed ([5, 6, 7, 8]).

- Scalar objects in Python
	- int, float, bool, NoneType.
	- Can use type() to see the type of an object.

- Expressions
	- Combine objects and operators to form expressions.
	- An expression has a value, which has a type.
	- <object> <operator> <object>

- Operators on ints and floats: + - * / % **

- Binding variables and values
	- Equal sign is an assignment of a value to a variable name.
	- Reuse names instead of values.

- Programming vs math
	- Math you often have to solve for x.
	- Computers don't know what to do with that.

- Changing bindings
	- You can re-bind variable names using new assignment statements.